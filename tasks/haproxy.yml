---

# Install HAProxy from rpm/deb packages
# from repo
- block:
    # RedHat/CentOS/OracleLinux 7 (SCL repo https://www.softwarecollections.org/en/scls/rhscl/rh-haproxy18/)
    - name: haproxy | install Software Collections (SCL) repository for CentOS 7
      package:
        name: centos-release-scl-rh
        state: present
      when: haproxy_install_repo == "true" and (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7')
      tags: haproxy_scl_repo

    - name: haproxy | install Software Collections (SCL) repository for OracleLinux 7
      yum_repository:
        name: ol7_software_collections
        description: Software Collection Library packages for Oracle Linux 7 (x86_64)
        baseurl: https://yum.oracle.com/repo/OracleLinux/OL7/SoftwareCollections/x86_64/
        gpgkey: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-oracle
        gpgcheck: yes
        enabled: yes
      when: haproxy_install_repo == "true" and (ansible_distribution == 'OracleLinux' and ansible_distribution_major_version == '7')
      tags: haproxy_scl_repo

    - name: haproxy | enable Software Collections (SCL) repository for RedHat 7
      command: 'sudo yum-config-manager --enable rhel-server-rhscl-7-rpms'
      when: haproxy_install_repo == "true" and (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '7')
      tags: haproxy_scl_repo

    - name: haproxy | install HAProxy 1.8 (rh-haproxy18 package)
      package:
        name: rh-haproxy18
        state: present
      when: ansible_distribution_major_version == '7'

    - name: haproxy | create a symlink "/usr/sbin/haproxy"
      file:
        src: /opt/rh/rh-haproxy18/root/usr/sbin/haproxy
        dest: /usr/sbin/haproxy
        owner: root
        group: root
        state: link
      when: ansible_distribution_major_version == '7'
  environment: '{{ proxy_env | default({}) }}'
  when: ansible_os_family == "RedHat" and installation_method == "repo" and haproxy_installation_method == "rpm"
  tags: haproxy

- block:
    # RedHat os family version 8 (and higher)
    - name: haproxy | install HAProxy 1.8 package
      package:
        name: haproxy
        state: present
      when: ansible_distribution_major_version is version('8', '>=')
  environment: '{{ proxy_env | default({}) }}'
  when: ansible_os_family == "RedHat" and installation_method == "repo" and haproxy_installation_method == "rpm"
  tags: haproxy

- block:
    # Debian
    - name: haproxy | add haproxy.debian.net repository apt-key
      apt_key:
        url: https://haproxy.debian.net/bernat.debian.org.gpg
        state: present
      when: haproxy_install_repo == "true" and (ansible_distribution == 'Debian' and ansible_distribution_major_version is version('10', '<='))

    - name: haproxy | add haproxy.debian.net repository
      apt_repository:
        repo: "deb http://haproxy.debian.net {{ ansible_distribution_release }}-backports-1.8 main"
        state: present
        update_cache: yes
      when: haproxy_install_repo == "true" and (ansible_distribution == 'Debian' and ansible_distribution_major_version is version('10', '<='))

    # Ubuntu
    - name: haproxy | add ppa:vbernat/haproxy-1.8 repository apt-key
      apt_key: # https://github.com/ansible/ansible/issues/31691
      #  keyserver: keyserver.ubuntu.com
      #  id: CFFB779AADC995E4F350A060505D97A41C61B9CD
        data: |
          -----BEGIN PGP PUBLIC KEY BLOCK-----

          xo0EUa70wAEEAMtI29s01PCX0JleVmh1QQr3rfPkfGo/GFKfcXRGE40nQHq+rWUh
          9slUN+kXBckSE0DDrnQH08Uvf12TJiHHFlbXnH5Ep+hgYPZGlVSpvBGO+c/CopU7
          RHMx9bl+pVOhrVeDWqLl2KqJI2wjJBLXA0dbRbCzmXPvrg3mBQ0hZ533ABEBAAHN
          IExhdW5jaHBhZCBQUEEgZm9yIFZpbmNlbnQgQmVybmF0wrgEEwECACIFAlGu9MAC
          GwMGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEFBdl6QcYbnN8aMD/RM3InMu
          bxTF9hzToCPF2EP37Q9WUQNF15f90jTOl8VqqpnUfGd2qlxUW31soCpDVxqX6lXf
          qB0bI9EDz2r7w+goxBH+cRArJ2APdC7wE/U9eIxY49mzNsqjsl7zY+eoX4v4fjqk
          33hFyMMJDUtPxSRHWFqP5QNwCN+fbPh5GiyL
          =ZiOf
          -----END PGP PUBLIC KEY BLOCK-----
        state: present
      when: haproxy_install_repo == "true" and (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version('18', '<='))

    - name: haproxy | add ppa:vbernat/haproxy-1.8 repository
      apt_repository:
        repo: "deb http://ppa.launchpad.net/vbernat/haproxy-1.8/ubuntu {{ ansible_distribution_release }} main"
        state: present
        update_cache: yes
      when: haproxy_install_repo == "true" and (ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version('18', '<='))

    - name: haproxy | install HAProxy 1.8 package
      apt:
        force_apt_get: yes
        name: "haproxy=1.8.*"
        state: present
  environment: '{{ proxy_env | default({}) }}'
  when: ansible_os_family == "Debian" and installation_method == "repo" and haproxy_installation_method == "deb"
  tags: haproxy

# from file (rpm/deb packages)
- block:
    - name: haproxy | copy packages into /tmp
      copy:
        src: '{{ item }}'
        dest: /tmp/
      loop: "{{ haproxy_package_file }}"
      register: copy_packages_result

    - name: haproxy | install packages
      apt:
        force_apt_get: yes
        deb: '/tmp/{{ item }}'
        state: present
      loop: "{{ haproxy_package_file | map('basename') | list }}"
      when: ansible_os_family == "Debian" and copy_packages_result.changed

    - name: haproxy | install packages
      package:
        name: '/tmp/{{ item }}'
        state: present
      loop: "{{ haproxy_package_file | map('basename') | list }}"
      when: ansible_os_family == "RedHat" and copy_packages_result.changed
  when: haproxy_package_file is defined and haproxy_package_file | length > 0
  tags: haproxy

# Build and install HAproxy from source
- name: haproxy | setting facts
  set_fact:
    target_linux: "{% if haproxy_major is version('2.0', '>=') %}linux-glibc{% else %}linux2628{% endif %}"
  when: haproxy_installation_method == "src"
  tags: haproxy

# from repo
- block:
    - name: "haproxy | download HAProxy and lua source files"
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 120
        validate_certs: no
      loop:
        - '{{ haproxy_src_repo }}'
        - '{{ lua_src_repo }}'
      environment: '{{ proxy_env | default({}) }}'

    - name: "haproxy | extract HAProxy source files into /tmp"
      unarchive:
        src: '/tmp/{{ haproxy_src_repo | basename }}'
        dest: /tmp/
        remote_src: yes
      when: haproxy_src_repo | length > 0

    - name: "haproxy | extract lua source files into /tmp"
      unarchive:
        src: '/tmp/{{ lua_src_repo | basename }}'
        dest: /tmp/
        remote_src: yes
      when: lua_src_repo | length > 0
      tags: lua
  when: installation_method == "repo" and haproxy_installation_method == "src"
  tags: haproxy

# from file
- block:
    - name: "haproxy | extract HAProxy source files into /tmp"
      unarchive:
        src: '{{ haproxy_src_file }}'
        dest: /tmp/
      when: haproxy_src_file | length > 0

    - name: "haproxy | extract lua source files into /tmp"
      unarchive:
        src: '{{ lua_src_file }}'
        dest: /tmp/
      when: lua_src_file | length > 0
      tags: lua
  when: installation_method == "file" and haproxy_installation_method == "src"
  tags: haproxy

- name: haproxy | install the prerequisites packages to compile HAProxy
  package:
    name: "{{ haproxy_compile_requirements }}"
    state: present
  environment: '{{ proxy_env | default({}) }}'
  when: haproxy_installation_method == "src"
  tags: [ haproxy, haproxy_requirements ]

- block:
    - name: haproxy | build and install lua (required for haproxy)
      become: yes
      become_user: root
      shell: "make INSTALL_TOP=/opt/{{ lua_src_repo.split('.tar.gz')[0] | basename }} linux install"
      args:
        chdir: "/tmp/{{ lua_src_repo.split('.tar.gz')[0] | basename }}"
      tags: lua

    - name: haproxy | build HAProxy
      become: yes
      become_user: root
      make:
        chdir: "/tmp/{{ haproxy_src_repo.split('.tar.gz')[0] | basename }}"
        params:
          TARGET: "{{ target_linux }}"
          USE_GETADDRINFO: 1
          USE_ZLIB: 1
          USE_REGPARM: 1
          USE_OPENSSL: 1
          USE_LIBCRYPT: 1
          USE_SYSTEMD: 1
          USE_PCRE: 1
          USE_NS: 1
          USE_TFO: 1
          USE_LUA: 1
          LUA_INC: "/opt/{{ lua_src_repo.split('.tar.gz')[0] | basename }}/include"
          LUA_LIB: "/opt/{{ lua_src_repo.split('.tar.gz')[0] | basename }}/lib"

    - name: haproxy | install HAProxy
      become: yes
      become_user: root
      make:
        chdir: "/tmp/{{ haproxy_src_repo.split('.tar.gz')[0] | basename }}"
        target: install
  when: installation_method == "repo" and haproxy_installation_method == "src"
  tags: haproxy

# installation_method: "file"
- block:
    - name: haproxy | build and install lua (required for haproxy)
      become: yes
      become_user: root
      shell: "make INSTALL_TOP=/opt/{{ lua_src_file.split('.tar.gz')[0] | basename }} linux install"
      args:
        chdir: "/tmp/{{ lua_src_file.split('.tar.gz')[0] | basename }}"
      tags: lua

    - name: haproxy | build HAProxy
      become: yes
      become_user: root
      make:
        chdir: "/tmp/{{ haproxy_src_file.split('.tar.gz')[0] | basename }}"
        params:
          TARGET: "{{ target_linux }}"
          USE_GETADDRINFO: 1
          USE_ZLIB: 1
          USE_REGPARM: 1
          USE_OPENSSL: 1
          USE_LIBCRYPT: 1
          USE_SYSTEMD: 1
          USE_PCRE: 1
          USE_NS: 1
          USE_TFO: 1
          USE_LUA: 1
          LUA_INC: "/opt/{{ lua_src_file.split('.tar.gz')[0] | basename }}/include"
          LUA_LIB: "/opt/{{ lua_src_file.split('.tar.gz')[0] | basename }}/lib"

    - name: haproxy | install HAProxy
      become: yes
      become_user: root
      make:
        chdir: "/tmp/{{ haproxy_src_file.split('.tar.gz')[0] | basename }}"
        target: install
  when: installation_method == "file" and haproxy_installation_method == "src"
  tags: haproxy

# Configure
- name: haproxy | make sure the kernel parameter "net.ipv4.ip_nonlocal_bind" are enabled
  sysctl:
    name: "net.ipv4.ip_nonlocal_bind"
    value: "1"
    sysctl_set: "yes"
    state: "present"
    reload: "yes"
  tags: haproxy

- name: haproxy | add haproxy group
  group:
    name: haproxy
    state: present
  tags: haproxy

- name: haproxy | add haproxy user
  user:
    name: haproxy
    comment: "HAProxy user"
    group: haproxy
    shell: /usr/sbin/nologin
  tags: haproxy

- name: haproxy | create directories
  file:
    dest: "{{ item }}"
    state: directory
    owner: haproxy
    group: haproxy
  loop:
    - /etc/haproxy
    - /var/run/haproxy
    - /var/lib/haproxy/dev
  tags: haproxy

- name: haproxy | generate systemd service file "/etc/systemd/system/haproxy.service"
  template:
    src: templates/haproxy.service.j2
    dest: /etc/systemd/system/haproxy.service
    owner: haproxy
    group: haproxy
  tags: [ haproxy, haproxy_service ]

- name: haproxy | generate conf file "/etc/haproxy/haproxy.cfg"
  template:
    src: templates/haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: haproxy
    group: haproxy
  register: haproxy_conf_result
  when: add_balancer is not defined or not add_balancer|bool
  tags: [ haproxy, haproxy_conf ]

- block: # for add_balancer.yml
    - name: haproxy | fetch haproxy.cfg file from master
      run_once: true
      fetch:
        src: /etc/haproxy/haproxy.cfg
        dest: files/haproxy.cfg
        validate_checksum: yes
        flat: yes
      delegate_to: '{{ groups.master[0] }}'

    - name: haproxy | copy haproxy.cfg file to replica
      copy:
        src: files/haproxy.cfg
        dest: /etc/haproxy/haproxy.cfg
        owner: haproxy
        group: haproxy
      register: haproxy_conf_result

    - name: haproxy | prepare haproxy.cfg conf file (replace "bind")
      lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^.*bind.*:7000$', line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:7000' }
       - { regexp: '^.*bind.*:5000$', line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:5000' }
       - { regexp: '^.*bind.*:5001$', line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:5001' }
       - { regexp: '^.*bind.*:5002$', line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:5002' }
       - { regexp: '^.*bind.*:5003$', line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:5003' }
      loop_control:
        label: "{{ item.line }}"
      when: cluster_vip is not defined or cluster_vip | length < 1

    - name: haproxy | prepare haproxy.cfg conf file (replace "bind" for stats)
      lineinfile:
        path: /etc/haproxy/haproxy.cfg
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^.*bind.*:7000$', line: '    bind {{ hostvars[inventory_hostname].inventory_hostname }}:7000' }
       - { regexp: '^.*bind.*:5000$', line: '    bind {{ cluster_vip }}:5000' }
       - { regexp: '^.*bind.*:5001$', line: '    bind {{ cluster_vip }}:5001' }
       - { regexp: '^.*bind.*:5002$', line: '    bind {{ cluster_vip }}:5002' }
       - { regexp: '^.*bind.*:5003$', line: '    bind {{ cluster_vip }}:5003' }
      loop_control:
        label: "{{ item.line }}"
      when: cluster_vip is defined and cluster_vip | length > 0
  when: add_balancer is defined and add_balancer|bool
  tags: [ haproxy, haproxy_conf ]

- name: haproxy | selinux | make sure the libsemanage-python, policycoreutils-python packages is present
  package:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
     - libsemanage-python
     - policycoreutils-python
  environment: '{{ proxy_env | default({}) }}'
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version == '7'
    - installation_method == "repo"
    - haproxy_installation_method == "rpm"
  tags: haproxy

- name: haproxy | selinux | make sure the python3-libsemanage, python3-policycoreutils packages is present
  package:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
     - python3-libsemanage
     - python3-policycoreutils
  environment: '{{ proxy_env | default({}) }}'
  when:
    - ansible_os_family == "RedHat"
    - ansible_distribution_major_version is version('8', '>=')
    - installation_method == "repo"
    - haproxy_installation_method == "rpm"
  tags: haproxy

- name: haproxy | selinux | set haproxy_connect_any flag to enable tcp connections
  seboolean:
    name: haproxy_connect_any
    state: yes
    persistent: yes
  when: ansible_selinux.status is defined and ansible_selinux.status == 'enabled'
  ignore_errors: yes
  tags: [ haproxy, haproxy_selinux ]

- name: haproxy | selinux | change the haproxy_t domain to permissive
  selinux_permissive:
    name: haproxy_t
    permissive: true
  when: ansible_selinux.status is defined and ansible_selinux.status == 'enabled'
  ignore_errors: yes
  tags: [ haproxy, haproxy_selinux ]

- name: haproxy | restart haproxy.service
  systemd:
    daemon_reload: yes
    name: haproxy
    enabled: yes
    state: restarted
  register: haproxy_restart_result
  tags: [ haproxy, haproxy_conf ]

- name: haproxy | check HAProxy is started and accepting connections
  wait_for:
    port: 7000
    host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
    state: started
    timeout: 120
    delay: 10
  ignore_errors: no
  when: haproxy_restart_result.changed
  tags: [ haproxy, haproxy_conf ]

 # for automate the haproxy configuration (optional)
- import_tasks: ../tasks/confd.yml
  when: dcs_type == "etcd"
  tags: confd

  # virtual ip address (and haproxy health checking)
- import_tasks: ../tasks/keepalived.yml
  when: cluster_vip is defined and cluster_vip | length > 0
  tags: keepalived

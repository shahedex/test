---

# install vip-manager package from repo
- block:
    - name: vip-manager | get vip-manager package
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 60
        validate_certs: no
      loop:
        - '{{ vip_manager_package_repo }}'
      environment: '{{ proxy_env | default({}) }}'

    - name: vip-manager | install package
      apt:
        force_apt_get: yes
        deb: "/tmp/{{ vip_manager_package_repo | basename }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: vip-manager | install package
      package:
        name: "/tmp/{{ vip_manager_package_repo | basename }}"
        state: present
      when: ansible_os_family == "RedHat"
  when: installation_method == "repo" and vip_manager_package_repo | length > 0
  tags: [ vip_manager, vip_manager_install ]

# install vip-manager package from file
- block:
    - name: vip-manager | copy vip-manager package into /tmp
      copy:
        src: '{{ vip_manager_package_file }}'
        dest: /tmp/

    - name: vip-manager | install package
      apt:
        force_apt_get: yes
        deb: "/tmp/{{ vip_manager_package_file | basename }}"
        state: present
      when: ansible_os_family == "Debian"

    - name: vip-manager | install package
      package:
        name: "/tmp/{{ vip_manager_package_file | basename }}"
        state: present
      when: ansible_os_family == "RedHat"
  when: installation_method == "file" and vip_manager_package_file | length > 0
  tags: [ vip_manager, vip_manager_install ]

- name: vip-manager | make sure the conf directory "{{ vip_manager_conf_dir }}" exist
  file:
    dest: "{{ vip_manager_conf_dir }}"
    state: directory
    owner: postgres
    group: postgres
  tags: [ vip_manager, vip_manager_conf ]

- name: vip-manager | generate conf file "{{ vip_manager_conf_dir }}/{{ vip_manager_conf_file }}"
  template:
    src: templates/vip-manager.yml.j2
    dest: '{{ vip_manager_conf_dir }}/{{ vip_manager_conf_file }}'
    owner: postgres
    group: postgres
    mode: 0644
  register: vip_manager_conf_result
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: [ vip_manager, vip_manager_conf ]

- block: # for add_pgnode.yml
    - name: vip-manager | fetch "{{ vip_manager_conf_file }}" conf file from master
      run_once: true
      fetch:
        src: '{{ vip_manager_conf_dir }}/{{ vip_manager_conf_file }}'
        dest: 'files/{{ vip_manager_conf_file }}'
        validate_checksum: yes
        flat: yes
      delegate_to: '{{ groups.master[0] }}'

    - name: vip-manager | copy "{{ vip_manager_conf_file }}" conf file to replica
      copy:
        src: 'files/{{ vip_manager_conf_file }}'
        dest: '{{ vip_manager_conf_dir }}'
      register: vip_manager_conf_result

    - name: vip-manager | prepare "{{ vip_manager_conf_file }}" conf file (replace "nodename","iface")
      lineinfile:
        path: '{{ vip_manager_conf_dir }}/{{ vip_manager_conf_file }}'
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^nodename:', line: 'nodename: "{{ ansible_hostname }}"' }
       - { regexp: '^iface:', line: 'iface: {{ vip_interface }} #interface to which the virtual ip will be added' }
      loop_control:
        label: "{{ item.line }}"
      register: vip_manager_conf_prepare_result
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: [ vip_manager, vip_manager_conf ]

- name: vip-manager | generate systemd service file
  template:
    src: templates/vip-manager.service.j2
    dest: /etc/systemd/system/vip-manager.service
    owner: postgres
    group: postgres
    mode: 0644
  register: vip_manager_service_result
  tags: [ vip_manager, vip_manager_service ]

- name: vip-manager | restart systemd service
  systemd:
    daemon_reload: yes
    name: vip-manager
    state: restarted
    enabled: yes
  register: vip_manager_restart_result
  when: vip_manager_conf_result.changed or vip_manager_service_result.changed or vip_manager_conf_prepare_result.changed
  tags: [ vip_manager, vip_manager_restart ]

- name: wait for the cluster ip address (VIP) "{{ cluster_vip }}" is running
  wait_for:
    host: "{{ cluster_vip }}"
    port: "{{ ansible_ssh_port }}"
    state: started
    timeout: 60
    delay: 2
  when: vip_manager_restart_result.changed
  tags: [ vip_manager, vip_manager_restart ]

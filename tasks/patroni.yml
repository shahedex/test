---
# Patroni install

- import_tasks: ../tasks/pip.yml
  when: patroni_installation_method == "pip"
  tags: [ patroni, patroni_install, pip ]

# installation_method: "repo" and patroni_installation_method: "pip"
- block:
      # default installation method from pip repo
    - name: Patroni | copy patroni requirements.txt file
      copy:
        src: requirements.txt
        dest: /tmp/requirements.txt
      when: patroni_pip_requirements_repo | length < 1

    - name: Patroni | install setuptools
      pip:
        name: setuptools
        state: latest
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_repo | length < 1

    - name: Patroni | install requirements
      pip:
        requirements: /tmp/requirements.txt
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:{{ postgresql_bin_dir }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_repo | length < 1

    - name: Patroni | install patroni
      pip:
        name: patroni
        state: latest
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_repo | length < 1 and patroni_install_version == "latest"

    - name: "Patroni | install patroni {{ patroni_install_version }}"
      pip:
        name: "patroni=={{ patroni_install_version }}"
        executable: pip3
        extra_args: "--trusted-host=pypi.python.org --trusted-host=pypi.org --trusted-host=files.pythonhosted.org"
        umask: "0022"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_repo | length < 1 and patroni_install_version != "latest"
  when: installation_method == "repo" and patroni_installation_method == "pip"
  environment: '{{ proxy_env | default({}) }}'
  tags: [ patroni, patroni_install ]

- block:
      # when "patroni_pip_requirements_repo" and "patroni_pip_package_repo" is defined
    - name: Patroni | download patroni requirements
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 120
        validate_certs: no
      loop: "{{ patroni_pip_requirements_repo }}"
      when: patroni_pip_requirements_repo | length > 0

    - name: Patroni | download patroni package
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 60
        validate_certs: no
      loop: "{{ patroni_pip_package_repo | list }}"
      when: patroni_pip_package_repo | length > 0

    - name: Patroni | install requirements
      pip:
        name: 'file:///tmp/{{ item }}'
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_requirements_repo | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_repo | length > 0

    - name: Patroni | install patroni
      pip:
        name: 'file:///tmp/{{ item }}'
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_package_repo | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_repo | length > 0
  when: installation_method == "repo" and patroni_installation_method == "pip"
  tags: [ patroni, patroni_install ]

# installation_method: "file" and patroni_installation_method: "pip"
- block:
    - name: Patroni | copy patroni requirements
      copy:
        src: '{{ item }}'
        dest: /tmp/
      loop: "{{ patroni_pip_requirements_file }}"
      when: patroni_pip_requirements_file | length > 0

    - name: Patroni | copy patroni package
      copy:
        src: '{{ item }}'
        dest: /tmp/
      loop: "{{ patroni_pip_package_file }}"
      when: patroni_pip_package_file | length > 0

    - name: Patroni | install requirements
      pip:
        name: 'file:///tmp/{{ item }}'
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_requirements_file | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_requirements_file | length > 0

    - name: Patroni | install patroni
      pip:
        name: 'file:///tmp/{{ item }}'
        executable: pip3
        extra_args: "--no-index --find-links=file:///tmp --ignore-installed"
        umask: "0022"
      loop: "{{ patroni_pip_package_file | map('basename') | list }}"
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/bin:/usr/bin"
      when: patroni_pip_package_file | length > 0
  when: installation_method == "file" and patroni_installation_method == "pip"
  tags: [ patroni, patroni_install ]

# installation_method: "repo" and patroni_installation_method: "rpm/deb"
- block:
    # Debian
    - name: Install | patroni package
      package:
        name: patroni
        state: present
      when: ansible_os_family == "Debian" and patroni_deb_package_repo | length < 1

    # RedHat
    - name: Install | patroni package
      package:
        name: patroni
        state: present
      when: ansible_os_family == "RedHat" and patroni_rpm_package_repo | length < 1

    # when patroni_deb_package_repo or patroni_rpm_package_repo URL is defined
    # Debian
    - name: Patroni | download patroni deb package
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 60
        validate_certs: no
      loop: '{{ patroni_deb_package_repo | list }}'
      when: ansible_os_family == "Debian" and patroni_deb_package_repo | length > 0

    - name: Patroni | install deb package
      apt:
        force_apt_get: yes
        deb: '/tmp/{{ item }}'
        state: present
      loop: "{{ patroni_deb_package_repo | map('basename') | list }}"
      when: ansible_os_family == "Debian" and patroni_deb_package_repo | length > 0

    # RedHat
    - name: Patroni | download patroni rpm package
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 60
        validate_certs: no
      loop: '{{ patroni_rpm_package_repo | list }}'
      when: ansible_os_family == "RedHat" and patroni_rpm_package_repo | length > 0

    - name: Patroni | install rpm package
      package:
        name: '/tmp/{{ item }}'
        state: present
      loop: "{{ patroni_rpm_package_repo | map('basename') | list }}"
      when: ansible_os_family == "RedHat" and patroni_rpm_package_repo | length > 0
  environment: '{{ proxy_env | default({}) }}'
  when: installation_method == "repo" and (patroni_installation_method == "rpm" or patroni_installation_method == "deb")
  tags: [ patroni, patroni_install ]

# installation_method: "file" and patroni_installation_method: "rpm/deb"
- block:
    # Debian
    - name: Patroni | copy patroni deb package into /tmp
      copy:
        src: '{{ patroni_deb_package_file }}'
        dest: /tmp/
      when: ansible_os_family == "Debian"

    - name: Patroni | install deb package
      apt:
        force_apt_get: yes
        deb: "/tmp/{{ patroni_deb_package_file | basename }}"
        state: present
      when: ansible_os_family == "Debian"

    # RedHat
    - name: Patroni | copy patroni rpm package into /tmp
      copy:
        src: '{{ patroni_rpm_package_file }}'
        dest: /tmp/
      when: ansible_os_family == "RedHat"

    - name: Patroni | install rpm package
      package:
        name: "/tmp/{{ patroni_rpm_package_file | basename }}"
        state: present
      when: ansible_os_family == "RedHat"
  when: installation_method == "file" and (patroni_installation_method == "rpm" or patroni_installation_method == "deb")
  tags: [ patroni, patroni_install ]

# Patroni configure
- name: Patroni | create conf directory
  file:
    path: /etc/patroni
    state: directory
  tags: [ patroni, patroni_conf ]

- name: Patroni | generate conf file "/etc/patroni/patroni.yml"
  template:
    src: templates/patroni.yml.j2
    dest: /etc/patroni/patroni.yml
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: [ patroni, patroni_conf ]

- block: # for add_pgnode.yml
    - name: Patroni | fetch patroni.yml conf file from master
      run_once: true
      fetch:
        src: /etc/patroni/patroni.yml
        dest: files/patroni.yml
        validate_checksum: yes
        flat: yes
      delegate_to: '{{ groups.master[0] }}'

    - name: Patroni | copy patroni.yml conf file to replica
      copy:
        src: files/patroni.yml
        dest: /etc/patroni/patroni.yml
        owner: postgres
        group: postgres
        mode: 0640

    - name: Patroni | prepare patroni.yml conf file (replace "name","listen","connect_address")
      lineinfile:
        path: /etc/patroni/patroni.yml
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^name:', line: 'name: {{ ansible_hostname }}' }
       - { regexp: '^  listen: .*:8008$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }}:8008' }
       - { regexp: '^  connect_address: .*:8008$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:8008' }
       - { regexp: '^  listen: ((?!8008).)*$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }},127.0.0.1:{{ postgresql_port }}' }
       - { regexp: '^  connect_address: ((?!8008).)*$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ postgresql_port }}' }
      loop_control:
        label: "{{ item.line }}"
      when: with_haproxy_load_balancing == "true" or install_pgbouncer == "true" or (cluster_vip is not defined or cluster_vip | length < 1)

    - name: Patroni | prepare patroni.yml conf file (replace "name","listen","connect_address")
      lineinfile:
        path: /etc/patroni/patroni.yml
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^name:', line: 'name: {{ ansible_hostname }}' }
       - { regexp: '^  listen: .*:8008$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }}:8008' }
       - { regexp: '^  connect_address: .*:8008$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:8008' }
       - { regexp: '^  listen: ((?!8008).)*$', line: '  listen: {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }},127.0.0.1:{{ postgresql_port }}' }
       - { regexp: '^  connect_address: ((?!8008).)*$', line: '  connect_address: {{ hostvars[inventory_hostname].inventory_hostname }}:{{ postgresql_port }}' }
      loop_control:
        label: "{{ item.line }}"
      when: with_haproxy_load_balancing != "true" and install_pgbouncer != "true" and (cluster_vip is defined and cluster_vip | length > 0)
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: [ patroni, patroni_conf ]

- name: Patroni | copy systemd service file "/etc/systemd/system/patroni.service"
  template:
    src: templates/patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    owner: postgres
    group: postgres
    mode: 0644
  tags: [ patroni, patroni_conf, patroni_service ]

- name: Patroni | Prepare PostgreSQL | create statistics directory (if not already exists)
  file:
    path: /var/lib/pgsql_stats_tmp
    state: directory
    mode: 01777
  tags: [ patroni, pgsql_stats_tmp ]

- name: Patroni | Prepare PostgreSQL | mount the statistics directory in memory (tmpfs)
  mount:
    path: /var/lib/pgsql_stats_tmp
    src: tmpfs
    fstype: tmpfs
    opts: "size=1024m,uid=postgres,gid=postgres"
    state: mounted
  tags: [ patroni, pgsql_stats_tmp ]

- name: Patroni | Prepare PostgreSQL | make sure the postgresql log directory "{{ postgresql_log_dir }}" exists
  file:
    path: "{{ postgresql_log_dir }}"
    owner: postgres
    group: postgres
    state: directory
    mode: 0700
  tags: patroni

 # when postgresql exists (master)
- block:
    - name: Patroni | Prepare PostgreSQL | check that data directory "{{ postgresql_data_dir }}" is initialized on Master
      stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_initialized
    - fail:
        msg: "Whoops! data directory {{ postgresql_data_dir }} is not initialized"
      when: not pgdata_initialized.stat.exists
      tags: [ patroni, patroni_check_init ]

      # "Debian"
    - name: Patroni | Prepare PostgreSQL | check PostgreSQL is started
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} status"
      register: pg_ctlcluster_status_result
      changed_when: false
      ignore_errors: yes
      when: ansible_os_family == "Debian"

    - name: Patroni | Prepare PostgreSQL | start PostgreSQL
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start"
      when: ansible_os_family == "Debian" and pg_ctlcluster_status_result.rc == 3

      # "RedHat"
    - name: Patroni | Prepare PostgreSQL | check PostgreSQL is started
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctl_status_result
      changed_when: false
      ignore_errors: yes
      when: ansible_os_family == "RedHat"

    - name: Patroni | Prepare PostgreSQL | start PostgreSQL
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl start -D {{ postgresql_data_dir }}"
      when: ansible_os_family == "RedHat" and pg_ctl_status_result.rc == 3

    - name: Patroni | Prepare PostgreSQL | check PostgreSQL is accepting connections
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_isready -p {{ postgresql_port }}"
      register: pg_isready_result
      until: pg_isready_result.rc == 0
      retries: 30
      delay: 10
      changed_when: false

    - name: Patroni | Prepare PostgreSQL | generate pg_hba.conf on Master
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640

      # "Debian"
    - name: Patroni | Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} reload"
      register: pg_ctlcluster_result
      failed_when: pg_ctlcluster_result.rc != 0
      when: ansible_os_family == "Debian"

      # "RedHat"
    - name: Patroni | Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl reload -D {{ postgresql_data_dir }}"
      register: pg_ctlcluster_result
      failed_when: pg_ctlcluster_result.rc != 0
      when: ansible_os_family == "RedHat"

    - name: Patroni | Prepare PostgreSQL | make sure the user "{{ patroni_superuser_username }}" are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: "{{ patroni_superuser_username }}"
        password: "{{ patroni_superuser_password }}"
        encrypted: yes
        role_attr_flags: "SUPERUSER"
        login_unix_socket: "{{ postgresql_unix_socket_dir }}"
        port: "{{ postgresql_port }}"
        state: present
      become: yes
      become_user: postgres

    - name: Patroni | Prepare PostgreSQL | make sure the user "{{ patroni_replication_username }}" are present, and password does not differ from the specified
      postgresql_user:
        db: postgres
        name: "{{ patroni_replication_username }}"
        password: "{{ patroni_replication_password }}"
        encrypted: yes
        role_attr_flags: "LOGIN,REPLICATION"
        login_unix_socket: "{{ postgresql_unix_socket_dir }}"
        port: "{{ postgresql_port }}"
        state: present
      become: yes
      become_user: postgres

    - name: Patroni | Prepare PostgreSQL | waiting for CHECKPOINT to complete before stopping postgresql
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/psql -p {{ postgresql_port }} -c 'CHECKPOINT'"
      register: checkpoint_result
      until: checkpoint_result.rc == 0
      retries: 180
      delay: 15

      # "Debian"
    - name: Patroni | Prepare PostgreSQL | stop PostgreSQL (will be managed by patroni)
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop -m fast"
      register: stop_result
      until: stop_result.rc == 0
      retries: 10
      delay: 30
      when: ansible_os_family == "Debian"

      # "RedHat"
    - name: Patroni | Prepare PostgreSQL | stop PostgreSQL (will be managed by patroni)
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl stop -D {{ postgresql_data_dir }} -m fast"
      register: stop_result
      until: stop_result.rc == 0
      retries: 30
      delay: 10
      when: ansible_os_family == "RedHat"

      # "Debian"
    - name: Patroni | Prepare PostgreSQL | check PostgreSQL is stopped
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} status"
      register: pg_ctlcluster_result
      failed_when: pg_ctlcluster_result.rc != 3
      changed_when: false
      when: ansible_os_family == "Debian"

      # "RedHat"
    - name: Patroni | Prepare PostgreSQL | check PostgreSQL is stopped
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl status -D {{ postgresql_data_dir }}"
      register: pg_ctlcluster_result
      failed_when: pg_ctlcluster_result.rc != 3
      changed_when: false
      when: ansible_os_family == "RedHat"

  when: is_master == "true" and postgresql_exists == "true"
  tags: [ patroni, patroni_start_master ]
 # when postgresql exists (master)

 # wheh postgresql NOT exists
- block:
    - name: Patroni | Prepare PostgreSQL | make sure PostgreSQL data directory "{{ postgresql_data_dir }}" exists
      file:
        path: "{{ postgresql_data_dir }}"
        owner: postgres
        group: postgres
        state: directory
        mode: 0700

    - name: Patroni | Prepare PostgreSQL | check that data directory "{{ postgresql_data_dir }}" is not initialized
      stat:
        path: "{{ postgresql_data_dir }}/PG_VERSION"
      register: pgdata_initialized
    - fail:
        msg: "Whoops! data directory {{ postgresql_data_dir }} is already initialized"
      when: pgdata_initialized.stat.exists
      tags: [ patroni, patroni_check_init ]

      # "Debian" only
      # patroni bootstrap failure is possible if the postgresql config files are missing
    - name: Patroni | Prepare PostgreSQL | make sure the postgresql config files exists
      stat:
        path: "{{ postgresql_conf_dir }}/postgresql.conf"
      register: postgresql_conf
      when: ansible_os_family == "Debian"

    - name: Patroni | Prepare PostgreSQL | generate default postgresql config files
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_createcluster {{ postgresql_version }} {{ postgresql_cluster_name }} -d {{ postgresql_data_dir }} -p {{ postgresql_port }} -e {{ postgresql_encoding }} --locale {{ postgresql_locale }}"
      register: pg_createcluster_result
      failed_when: pg_createcluster_result.rc != 0
      when: ansible_os_family == "Debian" and not postgresql_conf.stat.exists

    - name: Patroni | Prepare PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty on Master
      file:
        path: "{{ postgresql_data_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: 0700
      loop:
        - absent
        - directory
      when: is_master == "true"
  when: postgresql_exists != "true"
  tags: patroni
 # wheh postgresql NOT exists

# start patroni on master
- block:
    - name: Patroni | start patroni service on the Master server
      systemd:
        daemon_reload: yes
        name: patroni
        state: restarted
        enabled: yes

    - name: Patroni | wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: no

    - name: Patroni | check PostgreSQL is started and accepting connections on Master
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_isready -p {{ postgresql_port }}"
      register: pg_isready_result
      until: pg_isready_result.rc == 0
      retries: 30
      delay: 10
      changed_when: false
  when: is_master == "true"
  tags: [ patroni, patroni_start_master ]

- block:
    - name: Patroni | PostgreSQL Cluster status
      become: yes
      become_user: postgres
      command: patronictl -c /etc/patroni/patroni.yml list
      register: patronictl_result
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/bin:/usr/local/bin"
      changed_when: false
    - debug:
        var: patronictl_result.stdout_lines
  ignore_errors: yes
  when: is_master == "true"
  tags: patroni

# pg_hba (using a templates/pg_hba.conf.j2)
- block:
    - name: Patroni | Prepare PostgreSQL | generate pg_hba.conf
      template:
        src: templates/pg_hba.conf.j2
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640

      # "Debian"
    - name: Patroni | Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: yes
      become_user: postgres
      command: "/usr/bin/pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} reload"
      register: pg_ctlcluster_result
      failed_when: pg_ctlcluster_result.rc != 0
      when: ansible_os_family == "Debian" and is_master == "true"

      # "RedHat"
    - name: Patroni | Prepare PostgreSQL | reload for apply the pg_hba.conf
      become: yes
      become_user: postgres
      command: "{{ postgresql_bin_dir }}/pg_ctl reload -D {{ postgresql_data_dir }}"
      register: pg_ctlcluster_result
      failed_when: pg_ctlcluster_result.rc != 0
      when: ansible_os_family == "RedHat" and is_master == "true"
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: [ patroni, pg_hba_generate ]

- block: # for add_pgnode.yml
    - name: Patroni | Prepare PostgreSQL | fetch pg_hba.conf file from master
      run_once: true
      fetch:
        src: "{{ postgresql_conf_dir }}/pg_hba.conf"
        dest: files/pg_hba.conf
        validate_checksum: yes
        flat: yes
      delegate_to: '{{ groups.master[0] }}'

    - name: Patroni | Prepare PostgreSQL | copy pg_hba.conf file to replica
      copy:
        src: files/pg_hba.conf
        dest: "{{ postgresql_conf_dir }}/pg_hba.conf"
        owner: postgres
        group: postgres
        mode: 0640
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: [ patroni, pg_hba_generate ]

# start patroni on replica
- block:
    - name: Patroni | Prepare PostgreSQL | make sure the data directory "{{ postgresql_data_dir }}" is empty on Replica
      file:
        path: "{{ postgresql_data_dir }}"
        state: "{{ item }}"
        owner: postgres
        group: postgres
        mode: 0700
      loop:
        - absent
        - directory

    - name: Patroni | start patroni service on Replica servers
      systemd:
        daemon_reload: yes
        name: patroni
        state: restarted
        enabled: yes

    - name: Patroni | wait for port 8008 to become open on the host
      wait_for:
        port: 8008
        host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
        state: started
        timeout: 120
        delay: 10
      ignore_errors: no
  when: is_master != "true"
  tags: [patroni, patroni_start_replica]

# disable postgresql from autostart
  # "Debian"
- name: Patroni | turning off postgresql autostart from config "start.conf" (will be managed by patroni)
  copy:
    dest: "{{ postgresql_conf_dir }}/start.conf"
    content: "manual"
    owner: postgres
    group: postgres
    mode: 0644
  when: ansible_os_family == "Debian"
  tags: [ patroni, postgresql_disable ]

- name: Patroni | disable "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}" service
  systemd:
    name: "postgresql@{{ postgresql_version }}-{{ postgresql_cluster_name }}"
    enabled: no
    daemon_reload: yes
  when: ansible_os_family == "Debian"
  tags: [ patroni, postgresql_disable ]

  # "RedHat"
- name: Patroni | disable "postgresql-{{ postgresql_version }}" service (will be managed by patroni)
  systemd:
    name: "postgresql-{{ postgresql_version }}"
    enabled: no
    daemon_reload: yes
  when: ansible_os_family == "RedHat"
  tags: [ patroni, postgresql_disable ]

# PATRONICTL_CONFIG_FILE (patroni v1.6.1 and higher)
- name: Patroni | add PATRONICTL_CONFIG_FILE environment variable into /etc/environment
  lineinfile:
    dest: "/etc/environment"
    state: present
    regexp: "^export PATRONICTL_CONFIG_FILE"
    line: "export PATRONICTL_CONFIG_FILE=/etc/patroni/patroni.yml"
    owner: root
    group: root
    mode: '0644'
  ignore_errors: yes
  tags: [ patroni, patroni_env ]


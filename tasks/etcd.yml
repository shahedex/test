---

# install etcd package from repo
- block:
    - name: etcd cluster | download "etcd" package
      get_url:
        url: '{{ item }}'
        dest: /tmp/
        timeout: 60
        validate_certs: no
      loop:
        - '{{ etcd_package_repo }}'
      environment: '{{ proxy_env | default({}) }}'

    - name: etcd cluster | extract "etcd" into /tmp
      unarchive:
        src: '/tmp/{{ etcd_package_repo | basename }}'
        dest: /tmp/
        remote_src: yes

    - name: etcd cluster | copy "etcd" and "etcdctl" binary files to /usr/local/bin/
      copy:
        src: "/tmp/{{ etcd_package_repo.split('.tar.gz')[0] | basename }}/{{ item }}"
        dest: /usr/local/bin/
        mode: u+x,g+x,o+x
        remote_src: yes
      loop:
        - etcd
        - etcdctl
  when: installation_method == "repo" and etcd_package_repo | length > 0
  tags: etcd_install

# install etcd package from file
- block:
    - name: etcd cluster | extract "etcd" into /tmp
      unarchive:
        src: '{{ etcd_package_file }}'
        dest: /tmp/

    - name: etcd cluster | copy "etcd" and "etcdctl" binary files to /usr/local/bin/
      copy:
        src: "/tmp/{{ etcd_package_file.split('.tar.gz')[0] | basename }}/{{ item }}"
        dest: /usr/local/bin/
        mode: u+x,g+x,o+x
        remote_src: yes
      loop:
        - etcd
        - etcdctl
  when: installation_method == "file" and etcd_package_file | length > 0
  tags: etcd_install

- name: etcd cluster | create etcd conf directory
  file:
    path: /etc/etcd
    state: directory
  tags: etcd_conf

- name: etcd cluster | generate conf file "/etc/etcd/etcd.conf"
  template:
    src: templates/etcd.conf.j2
    dest: /etc/etcd/etcd.conf
  tags: etcd_conf

- name: etcd cluster | add etcd user
  user:
    name: etcd
    shell: /usr/sbin/nologin
    home: "{{ etcd_data_dir }}"
  tags: etcd_conf

- name: etcd cluster | copy systemd service file
  template:
    src: templates/etcd.service.j2
    dest: /etc/systemd/system/etcd.service
  tags: etcd_conf

- name: etcd cluster | enable and start systemd service
  systemd:
    daemon_reload: yes
    name: etcd
    enabled: yes
    state: started
  tags: etcd_start

- name: etcd cluster | wait for port 2379 to become open on the host
  wait_for:
    port: 2379
    host: 127.0.0.1
    state: started
    timeout: 120
    delay: 10
  ignore_errors: no
  tags: etcd_start

- block:
    - name: etcd cluster | wait until the etcd cluster is healthy
      command: /usr/local/bin/etcdctl cluster-health
      environment:
        ETCDCTL_API: 2
      register: etcd_health_result
      run_once: true
      changed_when: false
      until: "'cluster is healthy' in etcd_health_result.stdout"
      retries: 10
      delay: 10
      ignore_errors: no

    - name: etcd cluster | health
      run_once: true
      debug:
        var: etcd_health_result.stdout_lines
  tags: [ etcd_start, etcd_status ]


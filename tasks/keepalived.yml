---

- name: keepalived | install packages
  package:
    name: keepalived
  environment: '{{ proxy_env | default({}) }}'
  tags: [ keepalived_install, keepalived ]

- name: keepalived | make sure the kernel parameters "net.ipv4.ip_nonlocal_bind", "net.ipv4.ip_forward" are enabled
  sysctl:
    name: "{{ item }}"
    value: "1"
    sysctl_set: "yes"
    state: "present"
    reload: "yes"
  loop:
    - "net.ipv4.ip_nonlocal_bind"
    - "net.ipv4.ip_forward"
  tags: [ keepalived_conf, keepalived ]

- name: keepalived | make sure the "/usr/libexec/keepalived" directory exists
  file:
    dest: /usr/libexec/keepalived
    state: directory
    owner: root
    group: root
  tags: [ keepalived_conf, keepalived ]

- name: keepalived | create vrrp_script "/usr/libexec/keepalived/haproxy_check.sh"
  copy:
    content: |
      #!/bin/bash
      /bin/kill -0 `cat /var/run/haproxy/haproxy.pid`
    dest: /usr/libexec/keepalived/haproxy_check.sh
    owner: root
    group: root
    mode: 0700
  register: haproxy_check_result
  tags: [ keepalived_conf, keepalived ]

- name: keepalived | generate conf file "/etc/keepalived/keepalived.conf"
  template:
    src: templates/keepalived.conf.j2
    dest: /etc/keepalived/keepalived.conf
  register: keepalived_conf_result
  when: add_balancer is not defined or not add_balancer|bool
  tags: [ keepalived_conf, keepalived ]

- block: # for add_balancer.yml
    - name: keepalived | fetch keepalived.conf conf file from master
      run_once: true
      fetch:
        src: /etc/keepalived/keepalived.conf
        dest: files/keepalived.conf
        validate_checksum: yes
        flat: yes
      delegate_to: '{{ groups.master[0] }}'

    - name: keepalived | copy keepalived.conf conf file to replica
      copy:
        src: files/keepalived.conf
        dest: /etc/keepalived/keepalived.conf
      register: keepalived_conf_result

    - name: keepalived | prepare keepalived.conf conf file (replace "interface")
      lineinfile:
        path: /etc/keepalived/keepalived.conf
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^.*interface', line: '   interface {{ vip_interface }}' }
      loop_control:
        label: "{{ item.line }}"
      register: keepalived_conf_prepare_result
  when: add_balancer is defined and add_balancer|bool
  tags: [ keepalived_conf, keepalived ]

- name: keepalived | selinux | change the keepalived_t domain to permissive
  selinux_permissive:
    name: keepalived_t
    permissive: true
  when: ansible_selinux.status is defined and ansible_selinux.status == 'enabled'
  ignore_errors: yes
  tags: [ keepalived, keepalived_selinux ]

- name: keepalived | restart systemd service
  systemd:
    daemon_reload: yes
    name: keepalived
    enabled: yes
    state: restarted
  tags: [ keepalived_restart, keepalived ]

- name: wait for the cluster ip address (VIP) "{{ cluster_vip }}" is running
  wait_for:
    host: "{{ cluster_vip }}"
    port: "{{ ansible_ssh_port }}"
    state: started
    timeout: 60
    delay: 2
  tags: [ keepalived_restart, keepalived ]

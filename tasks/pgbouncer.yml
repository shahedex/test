---

- name: PgBouncer | install package
  package:
    name: pgbouncer
  environment: '{{ proxy_env | default({}) }}'
  when: ansible_os_family == "Debian" or (ansible_os_family == "RedHat" and ansible_distribution_major_version == '7')
  tags: [ pgbouncer_install, pgbouncer ]

# RHEL 8
- name: PgBouncer | install package
  dnf:
    name: pgbouncer
    disablerepo: AppStream
  environment: '{{ proxy_env | default({}) }}'
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= '8'
  tags: [ pgbouncer_install, pgbouncer ]

- name: PgBouncer | ensure config directory "{{ pgbouncer_conf_dir }}" exist
  file:
    path: "{{ pgbouncer_conf_dir }}"
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  tags: [ pgbouncer_conf, pgbouncer ]

- name: PgBouncer | copy systemd service file
  template:
    src: templates/pgbouncer.service.j2
    dest: /etc/systemd/system/pgbouncer.service
    owner: postgres
    group: postgres
    mode: 0644
  tags: [ pgbouncer_service, pgbouncer ]

- name: PgBouncer | stop and disable standard init script
  service:
    name: pgbouncer
    state: stopped
    enabled: no
  tags: [ pgbouncer_service, pgbouncer ]

- name: PgBouncer | enable log rotation with logrotate
  copy:
    content: |
      /var/log/pgbouncer/pgbouncer.log {
             daily
             rotate 7
             copytruncate
             delaycompress
             compress
             notifempty
             missingok
             su root root
      }
    dest: /etc/logrotate.d/pgbouncer
  tags: [ pgbouncer_logrotate, pgbouncer ]

- name: PgBouncer | configure pgbouncer.ini
  template:
    src: templates/pgbouncer.ini.j2
    dest: "{{ pgbouncer_conf_dir }}/pgbouncer.ini"
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: [ pgbouncer_conf, pgbouncer ]

- name: PgBouncer | configure userlist.txt
  template:
    src: templates/userlist.txt.j2
    dest: "{{ pgbouncer_conf_dir }}/userlist.txt"
    owner: postgres
    group: postgres
    mode: 0640
  when: existing_pgcluster is not defined or not existing_pgcluster|bool
  tags: [ pgbouncer_conf, pgbouncer ]

- block: # for add_pgnode.yml
    - name: PgBouncer | fetch pgbouncer.ini and userlist.txt conf files from master
      run_once: true
      fetch:
        src: '{{ item }}'
        dest: files/
        validate_checksum: yes
        flat: yes
      loop:
       - /etc/pgbouncer/pgbouncer.ini
       - /etc/pgbouncer/userlist.txt
      delegate_to: '{{ groups.master[0] }}'

    - name: PgBouncer | copy pgbouncer.ini and userlist.txt conf files to replica
      copy:
        src: 'files/{{ item }}'
        dest: /etc/pgbouncer/
        owner: postgres
        group: postgres
        mode: 0640
      loop:
       - pgbouncer.ini
       - userlist.txt

    - name: PgBouncer | prepare pgbouncer.ini conf file (replace "listen_addr")
      lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }}' }
      loop_control:
        label: "{{ item.line }}"
      when: with_haproxy_load_balancing == 'true' or (cluster_vip is not defined or cluster_vip | length < 1)

    - name: PgBouncer | prepare pgbouncer.ini conf file (replace "listen_addr")
      lineinfile:
        path: /etc/pgbouncer/pgbouncer.ini
        regexp: '{{ item.regexp }}'
        line: '{{ item.line }}'
        backrefs: yes
      loop:
       - { regexp: '^listen_addr =', line: 'listen_addr = {{ hostvars[inventory_hostname].inventory_hostname }},{{ cluster_vip }}' }
      loop_control:
        label: "{{ item.line }}"
      when: with_haproxy_load_balancing != 'true' and (cluster_vip is defined and cluster_vip | length > 0 )
  when: existing_pgcluster is defined and existing_pgcluster|bool
  tags: [ pgbouncer_conf, pgbouncer ]

- name: PgBouncer | restart systemd service
  systemd:
    daemon_reload: yes
    name: pgbouncer
    enabled: yes
    state: restarted
  tags: [ pgbouncer_restart, pgbouncer ]

- name: PgBouncer | wait for port "{{ pgbouncer_listen_port }}" to become open on the host
  wait_for:
    port: "{{ pgbouncer_listen_port }}"
    host: "{{ hostvars[inventory_hostname]['inventory_hostname'] }}"
    state: started
    timeout: 300
    delay: 5
  ignore_errors: no
  tags: [ pgbouncer_restart, pgbouncer ]

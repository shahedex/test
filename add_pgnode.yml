---

- name: PostgreSQL High-Availability Cluster Scaling (add replica node)
  hosts: replica
  become: true
  become_method: sudo
  any_errors_fatal: true
  gather_facts: true
  vars_files:
    - vars/main.yml
    - vars/system.yml
    - "vars/{{ ansible_os_family }}.yml"
  vars:
    existing_pgcluster: true

  pre_tasks:
    - import_tasks: tasks/check_system.yml

    - import_tasks: tasks/hostname.yml
      when: hostname is defined and hostname | length > 0
      tags: hostname

    - name: Make sure the gnupg package is present
      apt:
        name: gnupg
        state: present
        update_cache: yes
      environment: '{{ proxy_env | default({}) }}'
      when: ansible_os_family == "Debian" and installation_method == "repo"
      tags: [ add_repo, install_packages, install_postgres ]

    - name: Firewall | build a firewall_ports_dynamic_var
      set_fact:
        firewall_ports_dynamic_var: "{{ firewall_ports_dynamic_var |default([]) }} + {{ firewall_allowed_tcp_ports_for[item] }}"
      loop: '{{ hostvars[inventory_hostname].group_names }}'
      when: firewall_enabled_at_boot|bool
      tags: firewall

    - name: Firewall | build a firewall_rules_dynamic_var
      set_fact:
        firewall_rules_dynamic_var: "{{ firewall_rules_dynamic_var |default([]) }} + {{ firewall_additional_rules_for[item] }}"
      loop: '{{ hostvars[inventory_hostname].group_names }}'
      when: firewall_enabled_at_boot|bool
      tags: firewall

  roles:
    - role: ansible-role-firewall
      environment: '{{ proxy_env | default({}) }}'
      vars:
        firewall_allowed_tcp_ports: '{{ firewall_ports_dynamic_var | unique }}'
        firewall_additional_rules: '{{ firewall_rules_dynamic_var | unique }}'
      when: firewall_enabled_at_boot|bool
      tags: firewall

  tasks:
    - meta: flush_handlers

    - import_tasks: tasks/add-repository.yml
      tags: [ add_repo ]

    - import_tasks: tasks/packages.yml
      tags: [ install_packages ]

    - import_tasks: tasks/sudo.yml
      tags: [ sudo, postgres_sudo ]

    - import_tasks: tasks/configure.yml
      tags: configure

    - import_tasks: tasks/pgbouncer.yml
      when: install_pgbouncer == "true"
      tags: pgbouncer

    - import_tasks: tasks/patroni.yml
      tags: patroni

    - import_tasks: tasks/vip-manager.yml
      when: with_haproxy_load_balancing != "true" and (cluster_vip is defined and cluster_vip | length > 0)
      tags: [ vip, vip_manager ]

    # finish (info)
    - import_tasks: tasks/deploy_finish.yml
      tags: [ cluster_info, cluster_status ]


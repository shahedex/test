#jinja2: trim_blocks:True,lstrip_blocks:True

scope: {{ patroni_cluster_name }}
name: {{ ansible_hostname }}
namespace: /service/

restapi:
  listen: {{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008
  connect_address: {{ hostvars[inventory_hostname]['inventory_hostname'] }}:8008
#  certfile: /etc/ssl/certs/ssl-cert-snakeoil.pem
#  keyfile: /etc/ssl/private/ssl-cert-snakeoil.key
#  authentication:
#    username: username
#    password: password

{% if dcs_exists == 'false' and dcs_type == 'etcd' %}
etcd:
  hosts: {% for host in groups['etcd_cluster'] %}{{ hostvars[host]['inventory_hostname'] }}:2379{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}
{% if dcs_exists == 'true' and dcs_type == 'etcd' %}
etcd:
  hosts: {% for etcd_hosts in patroni_etcd_hosts %}{{etcd_hosts.host}}:{{etcd_hosts.port}}{% if not loop.last %},{% endif %}{% endfor %}
{% endif %}


bootstrap:
  # this section will be written into Etcd:/<namespace>/<scope>/config after initializing new cluster
  # and all other cluster members will use it as a `global configuration`
  dcs:
    ttl: {{ patroni_ttl |d(30, true) |int }}
    loop_wait: {{ patroni_loop_wait |d(10, true) |int }}
    retry_timeout: {{ patroni_retry_timeout |d(10, true) |int }}
    maximum_lag_on_failover: {{ patroni_maximum_lag_on_failover |d(1048576, true) |int }}
    master_start_timeout: {{ patroni_master_start_timeout |d(300, true) |int }}
    synchronous_mode: {{ synchronous_mode |d(false, true) |lower }}
    synchronous_mode_strict: {{ synchronous_mode_strict |d(false, true) |lower }}
    #standby_cluster:
      #host: 127.0.0.1
      #port: 1111
      #primary_slot_name: patroni 
    postgresql:
      use_pg_rewind: {{ patroni_postgresql_use_pg_rewind |d(false, true) |lower }}
      use_slots: true
      parameters:
      {% for parameter in postgresql_parameters %}
        {{ parameter.option }}: {{ parameter.value }}
      {% endfor %}
 
 #      recovery_conf:
#        restore_command: cp ../wal_archive/%f %p
 
  # some desired options for 'initdb'
{% if postgresql_exists == 'true' %}
#  initdb:  # Note: It needs to be a list (some options need values, others are switches)
#  - encoding: UTF8
#  - data-checksums
{% endif %}
{% if postgresql_exists == 'false' %}
  initdb:  # Note: It needs to be a list (some options need values, others are switches)
  - encoding: {{ postgresql_encoding }}
  - locale: {{ postgresql_locale }}
  {% if postgresql_data_checksums == 'true' %}
  - data-checksums
  {% endif %}
{% endif %}
 
  pg_hba:  # Add following lines to pg_hba.conf after running 'initdb'
  - host replication {{ patroni_replication_username }} 127.0.0.1/32 md5
  - host all all 0.0.0.0/0 md5

 # Additional script to be launched after initial cluster creation (will be passed the connection URL as parameter)
# post_init: /usr/local/bin/setup_cluster.sh
 
  # Some additional users which needs to be created after initializing new cluster
#  users:
#    admin:
#      password: admin-pass
#      options:
#        - createrole
#        - createdb

  
postgresql:
{% if with_haproxy_load_balancing != "true" and install_pgbouncer != "true" and (cluster_vip is defined and cluster_vip | length > 0) %}
  listen: {{ hostvars[inventory_hostname]['inventory_hostname'] }},{{ cluster_vip }},127.0.0.1:{{ postgresql_port }}
{% else %}
  listen: {{ hostvars[inventory_hostname]['inventory_hostname'] }},127.0.0.1:{{ postgresql_port }}
{% endif %}
  connect_address: {{ hostvars[inventory_hostname]['inventory_hostname'] }}:{{ postgresql_port }}
  use_unix_socket: true
  data_dir: {{ postgresql_data_dir }}
  bin_dir: {{ postgresql_bin_dir }}
  config_dir: {{ postgresql_conf_dir }}
  pgpass: {{ postgresql_pgpass }}
  authentication:
    replication:
      username: {{ patroni_replication_username }}
      password: {{ patroni_replication_password }}
    superuser:
      username: {{ patroni_superuser_username }}
      password: {{ patroni_superuser_password }}
#    rewind:  # Has no effect on postgres 10 and lower
#      username: rewind_user
#      password: rewind_password
  parameters:
    unix_socket_directories: {{ postgresql_unix_socket_dir }}
    stats_temp_directory: /var/lib/pgsql_stats_tmp
 
  remove_data_directory_on_rewind_failure: {{ patroni_remove_data_directory_on_rewind_failure |d(false, true) |lower }}
  remove_data_directory_on_diverged_timelines: {{ patroni_remove_data_directory_on_diverged_timelines |d(false, true) |lower }}

#  callbacks:
#    on_start:
#    on_stop:
#    on_restart:
#    on_reload:
#    on_role_change:
 
  create_replica_methods:
{% if patroni_create_replica_methods is defined and patroni_create_replica_methods | length > 0 %}
  {% for create_replica_method in patroni_create_replica_methods %}
    - {{ create_replica_method }}
  {% endfor %}
  {% if 'pgbackrest' in patroni_create_replica_methods %}
  pgbackrest:
    {% for item in pgbackrest %}
    {{ item.option }}: {{ item.value }}
    {% endfor %}
  {% endif %}
  {% if 'wal_e' in patroni_create_replica_methods %}
  wal_e:
    {% for item in wal_e %}
    {{ item.option }}: {{ item.value }}
    {% endfor %}
  {% endif %}
  {% if 'basebackup' in patroni_create_replica_methods %}
  basebackup:
    {% for item in basebackup %}
    {{ item.option }}: '{{ item.value }}'
    {% endfor %}
  {% endif %}
{% else %}
    - basebackup
  basebackup:
    max-rate: '100M'
{% endif %}

 #watchdog:
#  mode: automatic # Allowed values: off, automatic, required
#  device: /dev/watchdog
#  safety_margin: 5
 
tags:
    nofailover: false
    noloadbalance: false
    clonefrom: false
    nosync: false
# specify a node to replicate from. This can be used to implement a cascading replication.
#    replicatefrom: (node name)
